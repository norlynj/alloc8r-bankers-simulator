if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            if (selectedFile != null) {
                // Read the input file and store the values in a 2-dimensional array
                String inputFileName = fileChooser.getSelectedFile().getPath();

                try (BufferedReader br = new BufferedReader(new FileReader(inputFileName))) {
                    String line;
                    int lineNum = 1;
                    int processNum = 0;
                    int resourcesNum = 0;
                    while ((line = br.readLine()) != null) {
                        if (line.trim().isEmpty()) {
                            continue;
                        }
                        if (lineNum == 1) {
                            try {
                                String[] parts = line.split(": ");
                                if (parts.length == 2) {
                                    if (parts[0].equals("processNum")) {
                                        processNum = Integer.parseInt(parts[1]);
                                        inputPanel.getProcessNumField().setText(String.valueOf(processNum));
                                        System.out.println(processNum);
                                    } else if (parts[0].equals("resourcesNum")) {
                                        resourcesNum = Integer.parseInt(parts[1]);
                                        inputPanel.getAvailableResourcesNumField().setText(String.valueOf(resourcesNum));
                                        System.out.println(resourcesNum);
                                    } else {
                                        throw new ArrayIndexOutOfBoundsException();
                                    }
                                } else {
                                    throw new ArrayIndexOutOfBoundsException();
                                }
                            } catch (ArrayIndexOutOfBoundsException e) {
                                System.err.println("Error: Invalid format in line 1: " + line);
                                System.exit(1);
                            }
                        } else if (lineNum == 2) {
                            try {
                                resourcesNum = Integer.parseInt(line.split(": ")[1]);
                                inputPanel.getAvailableResourcesNumField().setText(String.valueOf(resourcesNum));
                                System.out.println(resourcesNum);
                            } catch (ArrayIndexOutOfBoundsException e) {
                                System.err.println("Error: Invalid format in line 2: " + line);
                                System.exit(1);
                            }
                        } else if (line.startsWith("[allocation]")) {
                            // Read values for allocation table
                            for (int i = 0; i < processNum; i++) {
                                String[] values = br.readLine().split(",");
                                for (int j = 0; j < resourcesNum; j++) {
                                    inputPanel.getAllocationTableModel().setValueAt(Integer.parseInt(values[j]), i, j);
                                }
                            }
                        } else if (line.startsWith("[max]")) {
                            // Read values for max table
                            for (int i = 0; i < processNum; i++) {
                                String[] values = br.readLine().split(",");
                                for (int j = 0; j < resourcesNum; j++) {
                                    inputPanel.getMaxTableModel().setValueAt(Integer.parseInt(values[j]), i, j);
                                }
                            }
                        } else if (line.startsWith("[available]")) {
                            // Read values for available table
                            String[] values = br.readLine().split(",");
                            for (int i = 0; i < resourcesNum; i++) {
                                inputPanel.getAvailableTableModel().setValueAt(Integer.parseInt(values[i]), 0, i);
                            }
                        } else if (line.startsWith("[request]")) {
                            // Read values for request table
                            String[] values = br.readLine().split(",");
                            for (int i = 0; i < resourcesNum; i++) {
                                inputPanel.getRequestResourceTableModel().setValueAt(Integer.parseInt(values[i]), 0, i);
                            }
                        }
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error reading file: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No file selected");
        }
    }